from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command, StateFilter
from sqlalchemy.testing.suite.test_reflection import users

import keyboards as kb
import database.request as rq
import locale

from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from datetime import datetime, time
from calendarbot import GoogleCalendar
from database.request import get_users

router = Router()
calendar = GoogleCalendar()


@router.message(F.text == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
async def cmd_add_schedule(message: Message):
    users = await rq.get_users()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        reply_markup=kb.get_employees_keyboard(users, mode='add')
    )

@router.callback_query(F.data.startswith("add_user_"))
async def select_employee(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[2])
    await state.update_data(user_id=user_id)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=await SimpleCalendar().start_calendar()
    )
    await state.set_state("waiting_for_date")
    await callback.answer()


@router.callback_query(StateFilter("waiting_for_date"),SimpleCalendarCallback.filter())
async def process_calendar(callback: CallbackQuery, callback_data: dict, state: FSMContext):
    calendar = SimpleCalendar()
    selected, date = await calendar.process_selection(callback, callback_data)

    if selected:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(date=date.date())

        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:", reply_markup=kb.get_hours_keyboard())
        await state.set_state("waiting_for_start_time")


# @router.message(StateFilter("waiting_for_start_time"))
# async def process_work_start(message: Message, state: FSMContext):
#     try:
#         work_start = datetime.strptime(message.text, "%H:%M").time()
#         await state.update_data(work_start=work_start)
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00):")
#         await state.set_state("waiting_for_end_time")
#     except ValueError:
#         await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–∫ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00).")

@router.callback_query(StateFilter("waiting_for_start_time"))
async def process_work_start(callback: CallbackQuery, state: FSMContext):
    time_str = callback.data.replace("hour_", "")
    work_start = datetime.strptime(time_str, "%H:%M").time()
    data = await state.get_data()


    await state.update_data(work_start=work_start)

    print('DATA000', data)
    await callback.message.answer(f"–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time_str}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
                                     reply_markup=kb.get_hours_keyboard())
    await state.set_state("waiting_for_end_time")
    await callback.answer()



@router.callback_query(StateFilter("waiting_for_end_time"))
async def process_work_end(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    time_str = callback.data.replace("hour_", "")
    work_end = datetime.strptime(time_str, "%H:%M").time()

    data = await state.get_data()
    date = data.get("date")
    # locale.setlocale(locale.LC_TIME, "ru_RU.UTF-8")
    day = date.strftime("%a")
    print('DATA', data)
    work_start = data["work_start"]

    if work_end <= work_start and work_end != time(0, 0):
        await callback.message.answer("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞ (–∫—Ä–æ–º–µ 00:00).")
        return
    else:
        await state.update_data(work_end=work_end, day=day)
        full_data = await state.get_data()


    print('DATA22222', full_data)
    date_str = full_data['date'].strftime("%d.%m.%Y")
    user = await rq.get_user(data['user_id'])
    all_work_time= await rq.get_work_time(data['user_id'])
    for work_time in all_work_time:
        if work_time.date == full_data['date']:
            await callback.message.answer(f"–ì—Ä–∞—Ñ–∏–∫ –¥–ª—è {user.first_name} –Ω–∞ {date_str} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            return

    await rq.add_work_schedule(**full_data)
    await callback.message.answer(f"–ì—Ä–∞—Ñ–∏–∫ –¥–ª—è {user.first_name} –Ω–∞ {date_str} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()


@router.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}!"
                         f"\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ–¥–∏—Ç–µ /add_user"
                         f"\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–≤–µ–¥–∏—Ç–µ /register"
                         f"\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–≤–µ–¥–∏—Ç–µ /list_users", reply_markup=kb.main)

@router.message(Command('register'))
async def register_handler(message: Message):
    await rq.register_users(message)

@router.message(Command('add_user'))
async def register_handler(message: Message):
    await rq.add_user(message)


@router.message(Command('list_users'))
async def register_handler(message: Message):
    await rq.list_users(message)

@router.message(F.text == '–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è')
async def set_schedule(message: types.Message):
    users = await rq.get_users()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        reply_markup=kb.get_employees_keyboard(users, mode='view')
    )

@router.callback_query(F.data.startswith("view_user_"))
async def get_schedule(callback: CallbackQuery, state: FSMContext):
    print(await rq.get_work_time(int(callback.data.split("_")[2])))
    user_id = int(callback.data.split("_")[2])
    work_time_data = await rq.get_work_time(user_id)
    await state.update_data(schedules=work_time_data, user_id=user_id)
    print(work_time_data)
    await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    if work_time_data != []:
        await callback.message.answer(f'–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Ä–∞–±–æ—Ç–Ω–∏–∫–∞',
                                      reply_markup=await kb.work_times(work_time_data))
    else:
        await callback.message.answer('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∞')

# @router.message(F.text == '–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è')
# async def set_schedule(message: types.Message):
#     """
#     –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è.
#     """
#     now = datetime.now()
#     calendar = kb.generate_calendar(now.year, now.month)
#     await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –º–µ—Å—è—Ü–µ {now.strftime("%B, %Y")}:", reply_markup=calendar)
#
#
# @router.callback_query(F.data.startswith('day_'))
# async def handle_calendar(callback_query: types.CallbackQuery):
#     """
#     –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
#     """
#     day = int(callback_query.data.split("_")[1])
#     await callback_query.message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–Ω—å: {day}. –í—ã–±–µ—Ä–∏ —Ä–∞–±–æ—á—É—é —Å–º–µ–Ω—É")

# @router.message(F.text == "–ú–æ–π –≥—Ä–∞—Ñ–∏–∫")
# async def view_my_schedule(message: types.Message):
#     conn = get_db_connection()
#     try:
#         employee = get_employee_by_telegram(conn, message.from_user.id)
#         if not employee:
#             await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.")
#             return
#
#         schedules = get_employee_schedule(conn, employee.id)
#         await message.answer(format_schedule(schedules))
#     finally:
#         conn.close()

@router.callback_query(F.data.startswith("work_time_"))
async def edit_work_time(callback: CallbackQuery, state: FSMContext):
    work_time_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    schedules = data.get("schedules", [])

    # –ù–∞—Ö–æ–¥–∏–º —Å–º–µ–Ω—É –ø–æ ID
    work_time = next((s for s in schedules if s.id == work_time_id), None)

    if not work_time:
        await callback.message.answer("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–º–µ–Ω—ã
    await state.update_data(work_time_id=work_time_id)

    await callback.message.answer(
        f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã:\n"
        f"–î–∞—Ç–∞: {work_time.date.strftime('%d.%m.%Y')}\n"
        f"–í—Ä–µ–º—è: {work_time.work_start.strftime('%H:%M')} ‚Äì {work_time.work_end.strftime('%H:%M')}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:",
        reply_markup=await SimpleCalendar().start_calendar()
    )
    await state.set_state('waiting_for_new_date')
    await callback.answer()

@router.callback_query(StateFilter('waiting_for_new_date'), SimpleCalendarCallback.filter())
async def edit_date(callback: CallbackQuery, callback_data, state: FSMContext):
    calendar = SimpleCalendar()
    selected, date = await calendar.process_selection(callback, callback_data)

    if selected:
        await state.update_data(new_date=date.date())
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:", reply_markup=kb.get_hours_keyboard())
        await state.set_state('waiting_for_new_start_time')

@router.callback_query(StateFilter('waiting_for_new_start_time'), F.data.startswith("hour_"))
async def edit_start_time(callback: CallbackQuery, state: FSMContext):
    new_start = datetime.strptime(callback.data.replace("hour_", ""), "%H:%M").time()
    await state.update_data(new_start=new_start)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:", reply_markup=kb.get_hours_keyboard())
    await state.set_state('waiting_for_new_end_time')
    await callback.answer()

@router.callback_query(StateFilter('waiting_for_new_end_time'), F.data.startswith("hour_"))
async def edit_end_time(callback: CallbackQuery, state: FSMContext):
    print('NYJNOE IISHKEE', await state.get_data())
    try:
        data = await state.get_data()
        work_time_id = data.get("work_time_id")
        new_end_str = callback.data.replace("hour_", "")
        new_end = datetime.strptime(new_end_str, "%H:%M").time()
        new_start = data["new_start"]

        if new_end <= new_start and new_end != time(0, 0):
            await callback.message.answer("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞ (–∫—Ä–æ–º–µ 00:00).")
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_data = {
            'work_time_id': work_time_id,
            'user_id': data['user_id'],
            'date': data['new_date'],
            'day': data['new_date'].strftime("%a"),  # –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫ ["–ü–ù", ...]
            'work_start': new_start,
            'work_end': new_end
        }

        success = await rq.update_work_time(**update_data)
        if success:
            await callback.message.answer("‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã.")
        await state.clear()
        await callback.answer()

    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
        await state.clear()
        await callback.answer()
